// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/poll.proto

package poll

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PollService_GetPolls_FullMethodName   = "/poll.PollService/GetPolls"
	PollService_CreatePoll_FullMethodName = "/poll.PollService/CreatePoll"
	PollService_GetPoll_FullMethodName    = "/poll.PollService/GetPoll"
)

// PollServiceClient is the client API for PollService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// PollService - service for creating and getting polls
type PollServiceClient interface {
	GetPolls(ctx context.Context, in *GetPollsRequest, opts ...grpc.CallOption) (*GetPollsResponse, error)
	CreatePoll(ctx context.Context, in *CreatePollRequest, opts ...grpc.CallOption) (*CreatePollResponse, error)
	GetPoll(ctx context.Context, in *GetPollRequest, opts ...grpc.CallOption) (*GetPollResponse, error)
}

type pollServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPollServiceClient(cc grpc.ClientConnInterface) PollServiceClient {
	return &pollServiceClient{cc}
}

func (c *pollServiceClient) GetPolls(ctx context.Context, in *GetPollsRequest, opts ...grpc.CallOption) (*GetPollsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPollsResponse)
	err := c.cc.Invoke(ctx, PollService_GetPolls_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pollServiceClient) CreatePoll(ctx context.Context, in *CreatePollRequest, opts ...grpc.CallOption) (*CreatePollResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePollResponse)
	err := c.cc.Invoke(ctx, PollService_CreatePoll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pollServiceClient) GetPoll(ctx context.Context, in *GetPollRequest, opts ...grpc.CallOption) (*GetPollResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPollResponse)
	err := c.cc.Invoke(ctx, PollService_GetPoll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PollServiceServer is the server API for PollService service.
// All implementations must embed UnimplementedPollServiceServer
// for forward compatibility.
//
// PollService - service for creating and getting polls
type PollServiceServer interface {
	GetPolls(context.Context, *GetPollsRequest) (*GetPollsResponse, error)
	CreatePoll(context.Context, *CreatePollRequest) (*CreatePollResponse, error)
	GetPoll(context.Context, *GetPollRequest) (*GetPollResponse, error)
	mustEmbedUnimplementedPollServiceServer()
}

// UnimplementedPollServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPollServiceServer struct{}

func (UnimplementedPollServiceServer) GetPolls(context.Context, *GetPollsRequest) (*GetPollsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPolls not implemented")
}
func (UnimplementedPollServiceServer) CreatePoll(context.Context, *CreatePollRequest) (*CreatePollResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePoll not implemented")
}
func (UnimplementedPollServiceServer) GetPoll(context.Context, *GetPollRequest) (*GetPollResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPoll not implemented")
}
func (UnimplementedPollServiceServer) mustEmbedUnimplementedPollServiceServer() {}
func (UnimplementedPollServiceServer) testEmbeddedByValue()                     {}

// UnsafePollServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PollServiceServer will
// result in compilation errors.
type UnsafePollServiceServer interface {
	mustEmbedUnimplementedPollServiceServer()
}

func RegisterPollServiceServer(s grpc.ServiceRegistrar, srv PollServiceServer) {
	// If the following call pancis, it indicates UnimplementedPollServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PollService_ServiceDesc, srv)
}

func _PollService_GetPolls_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPollsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PollServiceServer).GetPolls(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PollService_GetPolls_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PollServiceServer).GetPolls(ctx, req.(*GetPollsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PollService_CreatePoll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePollRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PollServiceServer).CreatePoll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PollService_CreatePoll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PollServiceServer).CreatePoll(ctx, req.(*CreatePollRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PollService_GetPoll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPollRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PollServiceServer).GetPoll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PollService_GetPoll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PollServiceServer).GetPoll(ctx, req.(*GetPollRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PollService_ServiceDesc is the grpc.ServiceDesc for PollService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PollService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "poll.PollService",
	HandlerType: (*PollServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPolls",
			Handler:    _PollService_GetPolls_Handler,
		},
		{
			MethodName: "CreatePoll",
			Handler:    _PollService_CreatePoll_Handler,
		},
		{
			MethodName: "GetPoll",
			Handler:    _PollService_GetPoll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/poll.proto",
}
